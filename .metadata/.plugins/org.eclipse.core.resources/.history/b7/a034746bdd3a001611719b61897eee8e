package recfun

object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    //for (row <- 0 to 10) {
    // for (col <- 0 to row)
    //   print(pascal(col, row) + " ")
    // println()
    //}
    //    
    //    println(balance("".toList));
    //    println(balance("m(is good)ytest".toList));
    //    println(balance("is not good(k".toList));
    //    println(balance("i(()s good )k".toList));
    //    println(balance("skjf(kd)ldkjf(kjsfd)()".toList));
    //    println(balance("i) not good )k".toList));
    //    println(balance("())(".toList));

    println(countChange(0, List(1, 2,3)));
  }

  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int = {
    def count(sum: Int, money: Int, coins: List[Int]): Int = {
      if (sum == money) {
        1;
      } else if (sum > money) {
        0;
      } else if (coins.size==0) {
        0
      } else {
        count(sum + coins.head, money, coins) + count(sum, money, coins.tail);
      }
    }
    return count(0, money, coins)
  }

  /**
   * Exercise 1
   */
  def pascal(c: Int, r: Int): Int = {
    if (c == 0 || r == c)
      return 1
    return pascal(c - 1, r - 1) + pascal(c, r - 1)
  }

  /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean = {
    if (chars.isEmpty) {
      return true;
    }

    def balanceBrackets(openBracketsNum: Int, chars: List[Char]): Boolean = {

      if (chars.size > 0 && openBracketsNum >= 0) {
        if (chars.head == '(') {
          return balanceBrackets(openBracketsNum + 1, chars.tail);
        } else if (chars.head == ')') {
          return balanceBrackets(openBracketsNum - 1, chars.tail);
        } else {
          return balanceBrackets(openBracketsNum, chars.tail);
        }
      }
      return openBracketsNum == 0;
    }
    return balanceBrackets(0, chars);
  }

}
